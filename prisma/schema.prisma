// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum Role {
    ADMIN
    MEMBER
    VISITOR
}

enum Status {
    TODO
    IN_PROGRESS
    DONE
}

model Post {
    id          Int      @id @default(autoincrement())
    name        String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    owners        Project[]
    assignedTask  Task[]
    projects      Collaborator[]
    comments      Comment[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Project {
    id          String      @id @default(cuid())
    name        String 
    description String      @db.Text
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    createdBy   User        @relation(fields: [createdById], references: [id])
    createdById String
    tasks       Task[]
    users       Collaborator[]
}

model Task {
    id          String  @id @default(cuid())
    title       String 
    description String? @db.Text
    status      Status  @default(TODO)
    assignee    User?   @relation(fields: [assigneeId], references: [id])
    assigneeId  String

    project     Project @relation(fields: [projectId], references: [id])
    projectId   String

    comments    Comment[]
}

model Collaborator {
    user        User    @relation(fields: [userId], references: [id])
    userId      String  

    project     Project @relation(fields: [projectId], references: [id])
    projectId   String

    assignedAt  DateTime @default(now())

    @@id([userId, projectId])
}

model Comment {
    id          String      @id @default(cuid())
    text        String      @db.Text
    createdAt   DateTime    @default(now())
    task        Task        @relation(fields: [taskId], references: [id])
    taskId      String

    user        User        @relation(fields: [userId], references: [id])
    userId      String 

}
